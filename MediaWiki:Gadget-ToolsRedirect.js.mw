/* vim: set noexpandtab ft=javascript ts=4 sw=4: */

( function ( $ ) {
	"use strict";

	var _TR, msglang = 'zh-hans',
		origPageName = mw.config.get('wgPageName'),
		scriptPath = mw.config.get('wgScriptPath'),
		_findRedirectCallbacks = [];

	mw.toolsRedirect = {

		findRedirectCallback: function( callback ) {
			/* Add new custom callback for finding new
			 * potential redirect titles.
			 *
			 * @param {function} callback( pagename, $content, titles ) -> title list
			 */
			if ( arguments.length === 1 ) {
				_findRedirectCallbacks.push( callback );
			}
			else {
				$.merge( _findRedirectCallbacks, arguments );
			}
			return this;
		},

		findRedirectBySelector: function( selector ) {
			/* A shortcut to add CSS selectors as rule to find new potential
			 * redirect titles.
			 *
			 * @param {string} selector
			 */
			_findRedirectCallbacks.push( function( pagename, $content ) {
				return $( selector ).map( function() {
					var title = $( this ).text();
					return title ? title : null;
				} );
			} );
			return this;
		}

	};

	_TR = {
		msg: null,
		tabselem: null,
		tagselem: null,
		variants: ['zh-cn', 'zh-hk', 'zh-mo', 'zh-sg', 'zh-tw'],
		init: function() {
			var self = this,
				btn = $(
					'<li id="ca-redirect"><span><a title="' + this.msg.btndesc + '">' +
					this.msg.btntitle + '</a></span></li>' );
			btn.click( function( evt ) {
				evt.preventDefault();
				self.dialog();
			} );
			$( 'li#ca-history' ).after( btn );
		},
		dialog: function() {
			var dlg = $( '<div class="dialog-redirect" title="' + this.msg.dlgtitle + '">' )
			.dialog( {
				bgiframe: true, resizable: false, modal: true, width: 600 } );
			this.tabselem = $( '<div class="tab-redirect">' ).appendTo( dlg );
			this.tagselem = $( '<ul>' ).appendTo( this.tabselem );
			this.addTabs();
			this.tabselem.tabs();
		},
		addTabs: function() {
			for ( var kname in this.tabs ) {
				if ( this.tabs[kname] === null ) {
					this.tabs[kname] = this['_initTab' + kname[0].charAt(0).toUpperCase() + kname.slice(1)]();
				}
				var tab = this.tabs[kname];
				this.tagselem.append( tab.tag );
				this.tabselem.append( tab.cont );
			}
			// default tab, autoload when dialog initiate
			this.loadView();
		},
		createTab: function( tabname, tabtitle, onClick ) {
			var self = this,
				tag = $( '<li><a href="#tab-' + tabname + '">' + tabtitle + '</a></li>' ),
				cont = $( '<div id="tab-' + tabname + '"/>' );
			$( 'a', tag ).click(
				function( evt ) {
					evt.preventDefault();
					self.tabselem.tabs( 'select', '#tab-' + tabname );
					onClick.call( self );
				}
			);
			return { 'tag': tag, 'cont': cont, loaded: false };
		},
		_initTabView: function() {
			return this.createTab( 'view', this.msg.tabviewtitle, this.loadView );
		},
		_initTabCreate: function() {
			return this.createTab( 'create', this.msg.tabcreatetitle, this.loadCreate );
		},
		tabs: {
			view: null,
			create: null
		},
		fix: function( pagenames ) {
			var self = this,
				desc = $( 'p.desc', this.tabs.view.cont ).text( this.msg.fixloading );
			$( 'p[class!=desc]', this.tabs.view.cont ).remove();
			this.loading( this.tabs.view.cont );
			this
			.bulkEdit(
				pagenames,
				this.msg.fixtext.replace( '$1', origPageName ),
				this.msg.fixsummary
			)
			.done( function() {
				// delay load before the asynchronous tasks on server finished
				setTimeout( function() {
					self.loaded( self.tabs.view.cont );
					self.loadView( true );
				}, 3000 );
			} );
		},
		create: function( pagenames ) {
			var self = this,
				desc = $( 'p.desc', this.tabs.create.cont ).text( this.msg.createloading );
			$( 'p[class!=desc]', this.tabs.create.cont ).remove();
			this.loading( this.tabs.create.cont );
			this
			.bulkEdit(
				pagenames,
				this.msg.createtext.replace( '$1', origPageName ),
				this.msg.createsummary.replace( '$1', origPageName )
			)
			.done( function() {
				// delay load before the asynchronous tasks on server finished
				setTimeout( function() {
					self.loaded( self.tabs.create.cont );
					self.tabs.view.loaded = false;
					self.loadCreate( true );
				}, 500 );
			} );
		},
		bulkEdit: function( titles, text, summary ) {
			var self = this,
				deferObj = $.Deferred();
			titles = titles.join( '|' );
			$.ajax( this.buildQuery(
				{ action: 'query', prop: 'info', 'titles': titles, intoken: 'edit' } ) )
			.done( function( data ) {
				var deferreds = [];
				$.each( data.query.pages, function( idx, page ) {
					deferreds.push( $.ajax(
						self.buildQuery( {
							action: 'edit', title: page.title, token: page.edittoken,
							'text': text, 'summary': summary } )
					) );
				});
				$.when.apply( $, deferreds ).done( function() {
					deferObj.resolveWith( self );
				} );
			} );
			return deferObj.promise();
		},
		loadTabCont: function( tabname, callback, reload ) {
			var self = this,
				tab = this.tabs[tabname];
			if ( reload ) tab.loaded = false;
			if ( !tab.loaded ) {
				tab.cont.html( '' );
				var desc = $( '<p class="desc">' +
					this.msg.rediloading + '</p>' ).appendTo( tab.cont );
				callback.apply( this )
				.done( function() { desc.text( self.msg['tab' + tabname + 'desc'] ); } )
				.fail( function() { desc.text( self.msg['tab' + tabname + 'notfound'] ); } );
				tab.loaded = true;
			}
		},
		loading: function( container ) {
			if ( container.prop( 'tagName' ).toLowerCase() == 'span' ) {
				container.addClass( 'mw-ajax-loader' );
			} else if ( $( 'span.mw-ajax-loader', container ).length === 0 ) {
				$( '<span class="mw-ajax-loader"></span>' ).appendTo( container );
			}
		},
		loaded: function( container ) {
			if ( container.prop( 'tagName' ).toLowerCase() == 'span' ) {
				container.removeClass( 'mw-ajax-loader' );
			} else {
				$( 'span.mw-ajax-loader', container ).remove();
			}
		},
		selectAll: function( cont ) {
			$( 'input[type=checkbox]:not(:disabled)', cont )
				.attr( 'checked', true );
		},
		selectInverse: function( cont ) {
			$( 'input[type=checkbox]:not(:disabled)', cont )
				.each( function() {
					var e = $( this );
					e.attr( 'checked', !e.attr( 'checked' ) );
				} ); 
		},
		selectAction: function( cont, cb ) {
			var pagenames = [];
			$( 'input[type=checkbox]:checked', cont )
			.each( function() {
				pagenames.push( $( this ).data( 'page-title' ) );
			} );
			if ( pagenames.length )
				cb.call( this, pagenames );
		},
		clickAction: function( cont, cb ) {
			var pagename = $( 'input[type="checkbox"]', cont ).data( 'page-title' );
			cb.call( this, [pagename] );
		},
		buildLink: function( attr ) {
			var a = $(
				'<a href="' + attr.href + '" title="' + attr.title +
				'" target="blank">' + attr.title + '</a>' );
			if ( attr.click )
				a.click( attr.click );
			if ( attr.classname )
				a.addClass( attr.classname );
			return a;
		},
		buildMethods: function( methods ) {
			var self = this,
					$container = $( '<span/>' ),
					methodLength = methods.length;
			$container.append( methodLength ? ' (' : '' );
			$.each( methods, function( idx, method ) {
				self.buildLink( method ).appendTo( $container );
				if ( idx + 1 < methodLength ) {
					$container.append( '<span class="gap">|</span>' );
				}
			} );
			$container.append( methodLength ? ')' : '' );
			return $container;
		},
		buildSelection: function( main, metd, mt, dsab ) {
			var cont = $( '<span/>' ),
				sele = $( '<input type="checkbox"/>' ).appendTo( cont );
			this.buildLink( main).appendTo( cont );
			this.buildMethods( metd ).appendTo( cont );
			sele.data( 'page-title', mt );
			if ( dsab ) {
				sele.attr( 'disabled', true );
			}
			return cont;
		},
		loadView: function( reload ) {
			var $container = this.tabs.view.cont;
			this.loadTabCont( 'view', function() {
				return this.loadRedirect( origPageName, $container, 0 );
			}, reload );
		},
		loadCreate: function( reload ) {
			this.loadTabCont( 'create', function() {
				return this.findRedirect( origPageName );
			}, reload );
		},
		loadRedirect: function( pagename, container, deep ) {
			this.loading( container );
			var self = this,
				deferObj = $.Deferred(),
				top = deep ? $( '<dl/>' ).appendTo( container ) : container;

			function onClickFix( evt ) {
				/* jshint validthis: true */
				var entry = $( this ).parents( 'dd, p' ).first();
				evt.preventDefault();
				self.clickAction( entry, self.fix );
			}

			$.ajax( this.buildQuery(
				{ action: 'query', prop: 'redirects', titles: pagename, rdlimit: 'max' } ) )
			.done( function( data ) {
				self.loaded( container );
				var has_redirect = false,
					desc = $( 'p.desc', self.tabs.view.cont ),
					maximumRedirectDepth = mw.config.get('toolsRedirectMaximumRedirectDepth', 10);

				$.each( data.query.pages, function( _, page ) {
					if ( !( 'redirects' in page ) ) {
						return;
					}
					$.each( page.redirects, function( _, rdpage ) {
						var rdtitle = rdpage.title,
							ultitle = rdtitle.replace( / /g, '_' ),
							baseuri = encodeURI( scriptPath + '/index.php?title=' + ultitle ),
							entry = ( deep ? $( '<dd/>' ) : $( '<p/>' ) ).appendTo( top ),
							methods = [ {href: baseuri + '&action=edit',
										 title: self.msg.rediedit } ];
						if ( deep ) {
							methods.push({
								href: '#',
								title: self.msg.tabviewfix,
								click: onClickFix
							} );
						}
						self.buildSelection( { href: baseuri + '&redirect=no', title: rdtitle },
							methods, ultitle, !deep ).appendTo( entry );
						if ( deep < maximumRedirectDepth ) {
							deferObj.pipe( function() {
								return self.loadRedirect( rdtitle, entry, deep + 1 );
							} );
						}
						has_redirect = true;
					} );
				} );

				if ( has_redirect ) {
					deferObj.resolveWith( self );
				}
				else {
					deferObj.rejectWith( self );
				}

				if ( has_redirect && $( 'a', desc ).length === 0 ) {
					self.buildMethods(
						[ { href: '#',
							title: self.msg.selectall,
							click: function( evt ) {
								evt.preventDefault();
								self.selectAll( self.tabs.view.cont ); }
						},
						{ href: '#',
							title: self.msg.selectinverse,
							click: function( evt ) {
								evt.preventDefault();
								self.selectInverse( self.tabs.view.cont ); }
						},
						{ href: '#',
							title: self.msg.tabviewfix,
							click: function( evt ) {
								evt.preventDefault();
								self.selectAction( self.tabs.view.cont, self.fix ); }
						} ]
					).appendTo( desc );
				}
			} );

			return deferObj.promise();
		},
		findVariants: function( pagename, titles ) {
			var self = this,
				suffixReg = /^.+?( \(.+?\))$/,
				retTitles = [],
				deferreds = [],
				deferObj = $.Deferred();
			$.each( this.variants, function( _, variant ) {
				deferreds.push( $.ajax( self.buildQuery( {
					action: 'parse',
					page: pagename,
					prop: 'displaytitle',
					variant: variant
				} ) ) );
			} );
			$.when.apply( $, deferreds )
			.done( function() {
				var suffixes = [];

				$.each( arguments, function() {
					var suffix,
						title = this[0].parse.displaytitle;

					// find title suffix,
					// for example " (济南市)" to "市中区 (济南市)"
					suffix = suffixReg.exec(title);
					if ( suffix && suffix.length === 2) {
						suffix = suffix[1];
					}
					else {
						suffix = '';
					}

					retTitles.push( title );
					suffixes.push( suffix );
				} );

				// append suffixes
				$.each( $.unique( suffixes ), function( _, suffix ) {
					$.merge( retTitles, $.map( titles, function( title ) {
						return suffixReg.test( title ) ? title : title + suffix;
					} ) );
				} );
				
				deferObj.resolveWith(self, [ $.unique( retTitles ) ] );
			} );

			return deferObj.pipe( function ( titles ) {
				return self.findNotExists( titles );
			} ).promise();
		},

		findNotExists: function( titles ) {
			var self = this,
				deferreds = [],
				alltitles = [],
				variants = ['zh-hans', 'zh-hant'],
				excludes = [ '用字模式' ],
				deferObj = $.Deferred();
			titles = titles.join( '|' );

			$.each( [ 'zh-hans', 'zh-hant' ], function( idx, variant ) {
				deferreds.push( $.ajax( self.buildQuery(
					{ action: 'parse', text: titles, prop: 'text', variant: variant } ) ) );
			} );

			$.when.apply( $, deferreds ).done( function() {
				$.each( arguments, function() {
					alltitles = alltitles.concat( $( this[0].parse.text['*'] )
												  .text().replace( /(^\s*|\s*$)/g, '' ).split( '|' ) );
				} );
				alltitles = alltitles.join( '|' );
				$.ajax( self.buildQuery( {action: 'query', prop: 'info', 'titles': alltitles } ) )
				.done( function( data ) {
					titles = [];
					$.each( data.query.pages, function( pageid, page ) {
						var title = page.title;
						if ( pageid < 0 && excludes.indexOf( title ) === -1 ) {
							titles.push( title );
						}
					} );
					deferObj.resolveWith( self, [ titles ] );
				} );
			} );

			return deferObj.promise();
		},

		findRedirect: function( pagename ) {
			var self = this,
				titles = [],
				frcDeferreds = [],
				findBoldsAsTitles = mw.config.get('toolsRedirectFindBoldsAsTitles', false),
				container = this.tabs.create.cont,
				$content = $( '#mw-content-text' ),
				deferObj = $.Deferred();
			this.loading( container );

			$.each( _findRedirectCallbacks, function( _, callback ) {
				var ret = callback( pagename, $content, titles );
				if ( typeof ret === 'string' ) {
					titles.push( ret );
				}
				else if ( 'done' in ret ) {
					// is Deferred
					frcDeferreds.push( ret );
				}
				else {
					$.merge( titles, ret );
				}
			} );

			// remove all empty titles
			titles = $.map( titles, function( title ) {
				return title ? title : null;
			} );

			function onClickCreate( evt ) {
				/* jshint validthis: true */
				var entry = $( this ).parents( 'p:first' );
				evt.preventDefault();
				self.clickAction( entry, self.create );
			}

			// handles the deferred callbacks
			$.when.apply( $, frcDeferreds )
			.pipe( function() {
				$.each( arguments, function( _, ret ) {
					if (typeof ret == 'string' ) {
						titles.push( ret );
					}
					else {
						$.merge( titles, ret );
					}
				} );
				return self.findVariants( pagename, titles );
			} )
			.done( function ( titles ) {
				// build HTML
				self.loaded( container );
				$.each( titles, function( _, title ) {
					var ultitle = title.replace( ' ', '_' ),
						baseuri = encodeURI( scriptPath + '/index.php?title=' + ultitle ),
						entry = $( '<p/>' ).appendTo( container );
					self.buildSelection(
						{ href: baseuri + '&action=edit&redlink=1',
						  title: title,
						  classname: 'new' },
						[ { href: '#',
							title: self.msg.tabcreatetitle,
							click: onClickCreate
						} ],
						ultitle, false
					).appendTo( entry );
				} );
				var desc = $( 'p.desc', container );
				if ( titles.length > 0 ) {
					deferObj.resolveWith( self, [ titles ] );
					self
					.buildMethods( [ {
						href: '#',
						title: self.msg.selectall,
						click: function( evt ) {
							evt.preventDefault();
							self.selectAll( container );
						}
					}, {
						href: '#',
						title: self.msg.selectinverse,
						click: function( evt ) {
							evt.preventDefault();
							self.selectInverse( container );
						}
					}, {
						href: '#',
						title: self.msg.tabcreatetitle,
						click: function( evt ) {
							evt.preventDefault();
							self.selectAction( container, self.create );
						}
					} ] )
					.appendTo( desc );
				}
				else {
					deferObj.rejectWith( self, [ titles ] );
				}
			} );

			return deferObj.promise();
		},
		buildQuery: function( data ) {
			var query = { url: scriptPath + '/api.php', dataType: 'json', type: 'POST' };
			query.data = data;
			query.data.format = 'json';
			return query;
		}
	};

	if ( 'zh-hant|zh-hk|zh-tw|zh-mo'.indexOf( mw.config.get('wgUserVariant') ) > -1 ) {
		msglang = 'zh-hant';
	}

	importScriptCallback( 'MediaWiki:Gadget-ToolsRedirect-msg-' + msglang + '.js', function() {

		_TR.msg = window.tools_redirect_msg;
			
		$( function() {
			mw.loader.using( ['jquery.ui.dialog', 'jquery.ui.tabs'], function () {
				_TR.init();
			} );
		} );

	} );

} )( jQuery );
