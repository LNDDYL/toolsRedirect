( function( jQuery ) {
"strict";

window.TR = {
  msg: tools_redirect_msg,
  tabselem: null,
  tagselem: null,
  variants: ['zh-cn', 'zh-hk', 'zh-sg', 'zh-tw'],
  init: function() {
    var self = this,
        btn = jQuery( '<li id="ca-redirect"><span><a title="' +
                      this.msg.btndesc + '">' + this.msg.btntitle +
                      '</a></span></li>' );
    btn.click( function( evt ) {
      evt.preventDefault();
      self.dialog();
    } );
    jQuery( 'li#ca-history' ).after( btn );
  },
  dialog: function() {
    var dlg = jQuery( '<div class="dialog-redirect" title="' +
                      this.msg.dlgtitle + '">' )
    .dialog( {
      bgiframe: true, resizable: false, modal: true, width: 600 } );
    this.tabselem = jQuery( '<div class="tab-redirect">' ).appendTo( dlg );
    this.tagselem = jQuery( '<ul>' ).appendTo( this.tabselem );
    this.addTabs();
    this.tabselem.tabs();
  },
  addTabs: function() {
    for ( var kname in this.tabs ) {
      if ( this.tabs[kname] === null ) {
        this.tabs[kname] = this['_initTab' + kname[0].charAt(0).toUpperCase() + kname.slice(1)]();
      }
      var tab = this.tabs[kname];
      this.tagselem.append( tab.tag );
      this.tabselem.append( tab.cont );
    }
    // default tab, autoload when dialog initiate
    this.loadView();
  },
  createTab: function( tabname, tabtitle, callback ) {
    var self = this,
        tag = jQuery( '<li><a href="#tab-' + tabname + '">' + tabtitle + '</a></li>' ),
        cont = jQuery( '<div id="tab-' + tabname + '"/>' );
    jQuery( 'a', tag ).click(
      function( evt ) {
        evt.preventDefault();
        self.tabselem.tabs( 'select', '#tab-' + tabname );
        callback.call( self );
      }
    );
    return { 'tag': tag, 'cont': cont, loaded: false };
  },
  _initTabView: function() {
    return this.createTab( 'view', this.msg.tabviewtitle, this.loadView );
  },
  _initTabCreate: function() {
    return this.createTab( 'create', this.msg.tabcreatetitle, this.loadCreate );
  },
  tabs: {
    view: null,
    create: null
  },
  fix: function( pagenames ) {
    var self = this,
        desc = jQuery( 'p.desc', this.tabs.view.cont ).text( this.msg.fixloading );
    jQuery( 'p[class!=desc]', this.tabs.view.cont ).remove();
    this.loading( this.tabs.view.cont );
    this.bulkEdit(
      pagenames,
      this.msg.fixtext.replace( '$1', wgPageName ),
      this.msg.fixsummary, function() {
        self.loaded( self.tabs.view.cont );
        self.loadView( true );
      }
    );
  },
  create: function( pagenames ) {
    var self = this,
        desc = jQuery( 'p.desc', this.tabs.create.cont ).text( this.msg.createloading );
    jQuery( 'p[class!=desc]', this.tabs.create.cont ).remove();
    this.loading( this.tabs.create.cont );
    this.bulkEdit(
      pagenames,
      this.msg.createtext.replace( '$1', wgPageName ),
      this.msg.createsummary.replace( '$1', wgPageName ), function() {
        self.loaded( self.tabs.create.cont );
        self.tabs.view.loaded = false;
        self.loadCreate( true );
      }
    );
  },
  bulkEdit: function( titles, text, summary, callback ) {
    var self = this;
    titles = titles.join( '|' );
    jQuery.ajax( this.buildQuery(
      { action: 'query', prop: 'info', 'titles': titles, intoken: 'edit' },
      null,
      function( data ) {
        var deferreds = Array();
        jQuery.each( data.query.pages, function( idx, page ) {
          deferreds.push( jQuery.ajax(
            self.buildQuery( {
              action: 'edit', title: page.title, token: page.edittoken,
              'text': text, 'summary': summary } )
          ) );
        });
        jQuery.when.apply( jQuery, deferreds ).done( function() {
          callback.call( self );
        } );
      }
    ) );
  },
  reloadTabCont: function( tabname, callback ) {
    var tab = this.tabs[tabname];
    tab.loaded = false;
    this.loadTabCont( tabname, callback );
  },
  loadTabCont: function( tabname, callback, reload ) {
    var self = this,
        tab = this.tabs[tabname];
    if ( reload ) tab.loaded = false;
    if ( !tab.loaded ) {
      tab.cont.html( '' );
      var desc = jQuery( '<p class="desc">' +
        this.msg.rediloading + '</p>' ).appendTo( tab.cont );
      callback.call( this, function( success ) {
        if ( success ) desc.text( self.msg['tab' + tabname + 'desc'] );
        else desc.text( self.msg['tab' + tabname + 'notfound'] );
      } );
      tab.loaded = true;
    }
  },
  loading: function( container ) {
    if ( container.prop( 'tagName' ).toLowerCase() == 'span' ) {
      container.addClass( 'mw-ajax-loader' );
    } else if ( jQuery( 'span.mw-ajax-loader', container ).length === 0 ) {
      jQuery( '<span class="mw-ajax-loader"></span>' ).appendTo( container );
    }
  },
  loaded: function( container ) {
    if ( container.prop( 'tagName' ).toLowerCase() == 'span' ) {
      container.removeClass( 'mw-ajax-loader' );
    } else {
      jQuery( 'span.mw-ajax-loader', container ).remove();
    }
  },
  selectAll: function( cont ) {
    jQuery( 'input[type=checkbox]:not(:disabled)', cont )
      .attr( 'checked', true );
  },
  selectInverse: function( cont ) {
    jQuery( 'input[type=checkbox]:not(:disabled)', cont )
      .each( function() {
        var e = jQuery( this );
        e.attr( 'checked', !e.attr( 'checked' ) );
      } ); 
  },
  selectAction: function( cont, cb ) {
    var pagenames = [];
    jQuery( 'input[type=checkbox]:checked', cont )
      .each( function() {
        pagenames.push( jQuery( '.meta-title', jQuery( this ).parent() ).text() );
      } );
    if ( pagenames.length )
      cb.call( this, pagenames );
  },
  clickAction: function( cont, cb ) {
    var pagename = jQuery( '.meta-title', cont ).text();
    cb.call( this, [pagename] );
  },
  buildLink: function( attr ) {
    var a = jQuery( '<a href="' + attr.href + '" title="' + attr.title +
      '" target="blank">' + attr.title + '</a>' );
    if ( attr.click )
      a.click( attr.click );
    if ( attr.classname )
      a.addClass( attr.classname );
    return a;
  },
  buildMethods: function( methods ) {
    var self = this,
        $container = jQuery( '<span/>' ),
        methodLength = methods.length;
    $container.append( methodLength ? ' (' : '' );
    jQuery.each( methods, function( idx, method ) {
      self.buildLink( method ).appendTo( $container );
      if ( idx + 1 < methodLength ) {
        $container.append( '<span class="gap">|</span>' );
      }
    } );
    $container.append( methodLength ? ')' : '' );
    return $container;    
  },
  buildSelection: function( main, metd, mt, dsab ) {
    var cont = jQuery( '<span/>' );
    var sele = jQuery( '<input type="checkbox"/>' ).appendTo( cont );
    this.buildLink( main).appendTo( cont );
    this.buildMethods( metd ).appendTo( cont );
    cont.append( '<span class="meta-title">' + mt + '</span>' );
    if ( dsab ) {
      sele.attr( 'disabled', true );
    }
    return cont;
  },
  loadView: function( reload ) {
    var self = this;
    this.loadTabCont( 'view', function( after ) {
      self.loadRedirect( wgPageName, self.tabs.view.cont, 0, after );
    }, reload );
  },
  loadCreate: function( reload ) {
    var self = this;
    this.loadTabCont( 'create', function( after ) {
      self.findRedirect( wgPageName, after );
    }, reload );
  },
  loadRedirect: function( pagename, container, deep, after ) {
    this.loading( container );
    var self = this,
        top = deep ? jQuery( '<dl/>' ).appendTo( container ) : container;
    jQuery.ajax( this.buildQuery(
      { action: 'query', list: 'backlinks', bltitle: pagename, bllimit: 'max', blfilterredir: 'redirects' },
      null, function( data ) {
        self.loaded( container );
        var l = data.query.backlinks.length;
        var desc = jQuery( 'p.desc', self.tabs.view.cont );
        for ( var i = 0; i < l; i ++ ) {
          var link = data.query.backlinks[i];
          if ( link.title ) {
            var ultitle = link.title.replace( ' ', '_' );
            var baseuri = encodeURI( wgScriptPath + '/index.php?title=' + ultitle );
            var entry = ( deep ? jQuery( '<dd/>' ) : jQuery( '<p/>' ) ).appendTo( top );
            var methods = [ {href: baseuri + '&action=edit',
                             title: self.msg.rediedit } ];
            if ( deep ) {
              methods.push(
                { href: '#',
                  title: self.msg.tabviewfix,
                  click: function( evt ) {
                    evt.preventDefault();
                    self.clickAction( entry, self.fix ); }
                } );
            }
            self.buildSelection( { href: baseuri + '&redirect=no', title: link.title },
              methods, ultitle, !deep ).appendTo( entry );
            self.loadRedirect( link.title, entry, deep + 1 );
          }
        }
        if ( after ) {
          after( l );
        } else if ( l && jQuery( 'a', desc ).length == 0 ) {
          self.buildMethods(
            [ { href: '#',
                title: self.msg.selectall,
                click: function( evt ) {
                  evt.preventDefault();
                  self.selectAll( self.tabs.view.cont ); }
              },
              { href: '#',
                title: self.msg.selectinverse,
                click: function( evt ) {
                  evt.preventDefault();
                  self.selectInverse( self.tabs.view.cont ); }
              },
              { href: '#',
                title: self.msg.tabviewfix,
                click: function( evt ) {
                  evt.preventDefault();
                  self.selectAction( self.tabs.view.cont, self.fix ); }
              } ] ).appendTo( desc );
        }
      } ) );
  },
  findVariants: function( pagename, titles, callback ) {
    var xhr,
        self = this,
        titles = Array(),
        deferreds = Array();
    $.each( this.variants, function( _, variant ) {
      xhr = jQuery.ajax( self.buildQuery( {
        action: 'parse',
        page: pagename,
        prop: 'displaytitle',
        variant: variant
      } ) );
      xhr.done( function( data ) {
        titles.push( data.parse.displaytitle );
      } );
    } );
    jQuery.when.apply( jQuery, deferreds ).done( function() {
      callback.call( self, titles );
    } );
  },
  findNotExists: function( titles, callback ) {
    var self = this,
        titles = titles.join('|'),
        alltitles = [],
        v = ['zh-hans', 'zh-hant'],
        t = 0,
        excludes = [ '用字模式' ];
    for( var i = 0; i < 2; i ++ ) {
      jQuery.ajax( this.buildQuery( { action: 'parse', text: titles, prop: 'text', variant: v[i] },
      null, function( data ) {
        alltitles = alltitles.concat( jQuery( data.parse.text['*'] ).text().replace( /(^\s*|\s*$)/g, '' ).split( '|' ) );
        t ++;
        if ( t == 2 ) {
          alltitles = alltitles.join( '|' );
          jQuery.ajax( self.buildQuery( {action: 'query', prop: 'info', 'titles': alltitles }, null,
            function( data ) {
              titles = [];
              var pages = data.query.pages;
              for ( var pageid in pages ) {
                var title = pages[pageid].title;
                if ( pageid < 0 && jQuery.inArray( title, excludes ) == -1 ) {
                  titles.push( title );
                }
              }
              callback.call( self, titles );
            }
          ) );
        }
      } ) );
    }
  },
  findRedirect: function( pagename, after ) {
    var self = this,
        titles = Array(),
        container = this.tabs.create.cont;
    this.loading( container );
    jQuery( 'div#bodyContent p b' ).each( function() {
      titles.push( jQuery( this ).text() ); } );
    this.findVariants( pagename, titles, function( tt ) {
      self.findNotExists( tt, function( t ) {
        self.loaded( container );
        l = t.length;
        for ( var i = 0; i < l; i ++ ) {
          var title = t[i];
          var ultitle = title.replace( ' ', '_' );
          var baseuri = encodeURI( wgScriptPath + '/index.php?title=' + ultitle );
          var entry = jQuery( '<p/>' ).appendTo( container );
          self.buildSelection(
            { href: baseuri + '&action=edit&redlink=1',
              'title': title,
              classname: 'new' },
            [ { href: '#',
                title: self.msg.tabcreatetitle,
                click: function( evt ) {
                  evt.preventDefault();
                  self.clickAction( entry, self.create ); }
              } ],
            ultitle, false ).appendTo( entry );
        }
        var desc = jQuery( 'p.desc', container );
        if ( after )
          after( l );
        if ( l ) {
          self.buildMethods( 
            [ { href: '#',
                title: self.msg.selectall,
                click: function( evt ) {
                  evt.preventDefault();
                  self.selectAll( container ); }
              },
              { href: '#',
                title: self.msg.selectinverse,
                click: function( evt ) {
                  evt.preventDefault();
                  self.selectInverse( container ); }
              },
              { href: '#',
                title: self.msg.tabcreatetitle,
                click: function( evt ) {
                  evt.preventDefault();
                  self.selectAction( container, self.create ); }
              }
            ] ).appendTo( desc );
          }
      } );
    } );
  },
  buildQuery: function( data, before, after ) {
    var query = { url: wgScriptPath + '/api.php', dataType: 'json', type: 'POST' };
    query.data = data;
    query.data.format = 'json';
    if ( before ) query.beforeSend = before;
    if ( after ) query.success = after;
    return query;
  }
}

jQuery( function() {
  TR.init();
});

})( jQuery );
